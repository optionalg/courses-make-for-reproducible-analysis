#!/usr/bin/env python

'''Calculate total daily dosage for a single patient.'''

import sys
import os
from glob import glob
from getopt import getopt

def main():
    '''Main command-line driver.'''

    try:
        config = parseArgs()
        data = [totalDosage(f) for f in sorted(config['inputs'])]
        if config['output'] is None:
            display(sys.stdout, data)
        else:
            with open(config['output'], 'w') as writer:
                display(writer, data)
    except Exception as e:
        sys.stderr.write(str(e).rstrip() + '\n')
        sys.exit(1)


def parseArgs():
    '''Parse command-line arguments, returning config dictionary.'''

    config = {
        'inputs' : None,
        'output' : None,
        'verbose' : False
    }

    options, config['inputs'] = getopt(sys.argv[1:], 'o:v')
    if not config['inputs']:
        raise Exception('No input filenames specified')

    for (opt, arg) in options:
        if opt == '-o':
            config['output'] = arg
        elif opt == '-v':
            config['verbose'] = True
        else:
            raise Exception('Unrecognized option "{}"'.format(opt))

    return config


def totalDosage(filename):
    '''Calculate total dosage, returning date from filename and total
    dosage in file.'''

    if not filename.endswith('.csv'):
        raise Exception('Input filename does not end with ".csv": "{}"'.format(filename))
    date = os.path.basename(filename)[:-4]
    with open(filename, 'r') as reader:
        reader.readline() # skip title
        dosage = sum([int(line.strip().split(',')[1]) for line in reader])
    return (date, dosage)


def display(stream, data):
    stream.write('Date,Total Dosage (mg)\n')
    for (date, dosage) in data:
        stream.write('{},{}\n'.format(date, dosage))


if __name__ == '__main__':
    main()
